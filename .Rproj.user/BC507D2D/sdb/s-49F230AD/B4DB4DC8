{
    "collab_server" : "",
    "contents" : "require(methods)\n#' @include cellbase_functions.R\nCellbaseQuery <- setClass(\"CellbaseQuery\",\n                          slots = c(host=\"character\", version=\"character\", species=\"character\",batch_size=\"numeric\", num_threads=\"numeric\"),\n                          prototype = prototype(\n                            host=\"http://bioinfodev.hpc.cam.ac.uk/cellbase-dev-v4.0/webservices/rest/\",\n                            version = \"v4/\",\n                            species=\"hsapiens/\",\n                            batch_size=200,\n                            num_threads=8\n                          )\n)\n###\n#' @title \n#' This is a constructor function for CellbaseQuery object which holds the default\n#' configuration for connecting to the cellbase web services\n#' @details\n#' This class defines the CellbaseQuery object which holds the default\n#' configuration required by CellbaseQuery methods to connect to the\n#' cellbase web services. By defult it is configured to query human\n#' data based on the GRCh37 genome assembly\n#' @param species A charcter should be one of the species supported by cellbase run cbSpecies\n#' to see avaiable species and their corresponding data\n#' @import methods \n#' @slot host A character the default host url for cellllbase webservices\n#' @slot version A character the cellbae API version\n#' @slot species A charcter should be one of the species supported by cellbase\n#' @slot batch_size numeric a parameter for \n#' @return An object of class CellbaseQuery\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  print(cb)\n#' @export CellbaseQuery\n#' @exportClass CellbaseQuery\nCellbaseQuery <- function(species=character()){\n  if(length(species)>0){\n    species<-paste0(species,\"/\",sep=\"\")\n  }else{\n    species <-\"hsapiens/\" \n  }\n  new(\"CellbaseQuery\", species=species )\n}\n\n##### Methods for CellbaseQuery objects\n#  The show method for cellbaseQuery class\nsetMethod(\"show\",signature = \"CellbaseQuery\",definition = function(object){\n  cat(\"An object of class \", class(object), \"\\n\", sep = \"\")\n  cat(\"| it holds the configuration for querying the Cellbase databases\\n\")\n  cat(\"| to get more information about the available species run cbSpecies()\\n\")\n  cat(\"| to change the default species from human to any other species use Species()\\n\")\n})\n#' The generic method for getCellbase\n#' \n#' This method allows the user to query the cellbase web services without\n#' any predefined categories, subcategries, or resources\nsetGeneric(\"getCellbase\", function(object, file=NULL,categ, subcateg,ids,resource,filters=NULL, ...) standardGeneric(\"getCellbase\"))\n#' The generic method for getCellbase\n#' \n#' @aliases getCellbase\n#' This method allows the user to query the cellbase web services without\n#' any predefined categories, subcategries, or resources\n#' This method allows the user to query the cellbase web services without\n#' any predefined categories, subcategries, or resources\n#' @param object an object of class CellbaseQuery\n#' @param file a path to a bgzipped and tabix indexed vcf file,\n#' @param categ charcter to specify the category to be queried\n#' this could be \"feature\", \"genomic\", \"regulatory\", or \"network\"\n#' @param subcateg charcter to specify the subcategory to be queried\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter to specify the resource to be queried\n#' @param filters an object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @param ... any extra arguments\n#' \n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples\n#'  library(cellbaseR)\n#'  cb <- CellbaseQuery\n#'  res <- getCellbase(object=cb,categ=\"feature\",subcateg=\"gene\",ids=\"TET1\",resource=\"info\")\n#'\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"getCellbase\", \"CellbaseQuery\",  definition = function(object,file=NULL, categ, subcateg,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- categ\n  subcateg<- subcateg\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n##############\n##############\n#############\n\nsetGeneric(\"cbClinical\", function(object, filters,...) standardGeneric(\"cbClinical\"))\n#' A method to query Clinical data from Cellbase web services\n#' \n#' A method to query Clinical data from Cellbase web services\n#' @aliases cbClinical\n#' @param object an object of class CellbaseQuery\n#' @param filters a object of class CellbaseParam specifying the paramters limiting the CellbaseQuery\n#' @param ... any extra arguments\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#' cb <- CellbaseQuery()\n#' cbparam <- CellbaseParam(gene=c(\"TP73\",\"TET1\"))\n#' res <- cbClinical(object=cb,filters=cbParam)\n#' \n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbClinical\", \"CellbaseQuery\",  definition = function(object,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"feature\"\n  subcateg<- \"clinical\"\n  ids <- NULL\n  resource <- \"all\"\n  if(length(filters@genome)>0){\n    genome <- paste0(filters@genome,collapse = \",\")\n    genome <- paste(\"genome=\",genome,sep = \"\")\n  }else{\n    genome <- character()\n  }\n  if(length(filters@gene)>0){\n    genes <- paste0(filters@gene,collapse = \",\")\n    genes <- paste(\"gene=\",genes,sep = \"\")\n  }else{\n    gene <- character()\n  }\n\n  if(length(filters@region)>0){\n    region <- paste0(filters@region,collapse = \",\")\n    region <- paste(\"region=\",region,sep = \"\")\n  }else{\n    region <-character()\n  }\n\n  if(length(filters@rs)>0){\n    rs <- paste0(filters@rs,collapse = \",\")\n    rs <- paste(\"rs=\",rs,sep = \"\")\n  }else{\n    rs <- character()\n  }\n  if(length(filters@so)>0){\n    so <- paste0(filters@so,collapse = \",\")\n    so <- paste(\"so=\",so,sep = \"\")\n  }else{\n    so <- character()\n  }\n\n  if(length(filters@phenotype)>0){\n    phenotype <- paste0(filters@phenotype,collapse = \",\")\n    phenotype <- paste(\"phenotype=\",phenotype,sep = \"\")\n  }else{\n    phenotype <- character()\n  }\n\n  limit <- \"limit=1000\"\n  filters <- c(genome=genome, genes=genes,region=region,rs=rs,so=so,phenotype=phenotype,limit=limit)\n  filters <- paste(filters,collapse = \"&\")\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta=NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=filters,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n###\nsetGeneric(\"cbGene\", function(object,ids,resource,filter, ...) standardGeneric(\"cbGene\"))\n#' A method to query gene data from Cellbase web services\n#' \n#' @aliases cbGene\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @param ... any extra arguments\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbGene(object=cb, ids=c(\"TP73\",\"TET1\"), resource=\"clinical\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbGene\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"feature\"\n  subcateg<- \"gene\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta=NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n\n###\nsetGeneric(\"cbRegion\", function(object,ids,resource,filters, ...) standardGeneric(\"cbRegion\"))\n#' A method to query region data from Cellbase web services\n#' \n#' @aliases cbRegion\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @param ... any extra arguments\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbRegion(object=cb, ids=\"17:1000000-1200000\", resource=\"gene\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbRegion\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"genomic\"\n  subcateg<- \"region\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n###\nsetGeneric(\"cbSnp\", function(object,ids,resource,filters, ...) standardGeneric(\"cbSnp\"))\n#' A method to query snp data from Cellbase web services\n#' @aliases cbSnp\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @param ... any extra arguments\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbSnp(object=cb, ids=\"rs6025\", resource=\"info\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbSnp\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"feature\"\n  subcateg<- \"snp\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n###\nsetGeneric(\"cbVariant\", function(object,ids,resource,filters=NULL, ...) standardGeneric(\"cbVariant\"))\n#' A method to query variant data from Cellbase web services\n#' \n#' @aliases cbVariant\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @param ... any extra arguments\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbVariant(object=cb, ids=\"19:45411941:T:C\", resource=\"annotation\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbVariant\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"genomic\"\n  subcateg<- \"variant\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta =NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n###\nsetGeneric(\"cbTfbs\", function(object,ids,resource,filters=NULL, ...) standardGeneric(\"cbTfbs\"))\n#' A method to query transcription factors binding sites data from Cellbase web services\n#' \n#' @aliases cbTfbs\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbTfbs(object=cb, ids=\"PAX1\", resource=\"gene\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbTfbs\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"regulation\"\n  subcateg<- \"tf\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n###\nsetGeneric(\"cbTranscript\", function(object,ids,resource,filters=NULL, ...) standardGeneric(\"cbTranscript\"))\n#' A method to query transcript data from Cellbase web services\n#' @aliases cbTranscript\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried can be\n#' any of \"info\", \"function_prediction\", \"gene\", \"sequence\", \"variation\", or \"protein\"\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbTranscript(object=cb, ids=\"ENST00000373644\", resource=\"info\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbTranscript\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"feature\"\n  subcateg<- \"transcript\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n\n\n###\nsetGeneric(\"cbXref\", function(object,ids,resource,filters=NULL, ...) standardGeneric(\"cbXref\"))\n#' A method to query cross reference data from Cellbase web services\n#' \n#' @aliases cbXref\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried can be any of \"xref\", \"gene\", \"starts\"with\", or \"contains\"\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbXref(object=cb, ids=\"ENST00000373644\", resource=\"xref\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbXref\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"feature\"\n  subcateg<- \"id\"\n  ids <- toupper(ids)\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n###\n###\nsetGeneric(\"cbProtein\", function(object,ids,resource,filters=NULL, ...) standardGeneric(\"cbProtein\"))\n#' A method to query protein data from Cellbase web services\n#' \n#' @aliases cbProtein\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of uniprot ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbProtein(object=cb, ids=\"O15350\", resource=\"sequence\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbProtein\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"feature\"\n  subcateg<- \"protein\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n\n###\nsetGeneric(\"cbGenomeSequence\", function(object,ids,resource,filters=NULL, ...) standardGeneric(\"cbGenomeSequence\"))\n#' A method to query sequence data from Cellbase web services\n#' \n#' @aliases cbGenomeSequence\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @param ... any extra arguments\n#' @return an object of class CellbaseResult which holds a dataframe\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbGenomeSequence(object=cb, ids=\"22\", resource=\"info\")\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbGenomeSequence\", \"CellbaseQuery\",  definition = function(object,ids,resource,filters=NULL,...) {\n\n  host <- object@host\n  species <- object@species\n  version <- object@version\n  categ <- \"genomic\"\n  subcateg<- \"chromosome\"\n  ids <- ids\n  resource <- resource\n  result <- fetchCellbase(file=NULL,host=host, version=version, meta = NULL,species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n# setGeneric(\"cbMeta\", function(object,file=NULL,host=NULL, version=NULL, species, categ, subcateg,ids,resource,filters=NULL, ...) standardGeneric(\"cbMeta\"))\n# setMethod(\"cbMeta\", \"CellbaseQuery\",  definition = function(object,file=NULL,host=NULL, version=NULL,meta=NULL, species=NULL, categ, subcateg,ids,resource,filters=NULL,...) {\n#\n#   host <- object@host\n#   species <- species\n#   version <- object@version\n#   meta <- paste0(\"meta\",\"/\",sep=\"\")\n#   categ <- NULL\n#   subcateg<- NULL\n#   ids <- NULL\n#   resource <- NULL\n#   result <- fetchCellbase(file=NULL,host=host, version=version,meta = meta, species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n#   data <- lapply(result, function(x)as.data.frame(x))\n#   return(data)\n# })\n\n###\nsetGeneric(\"cbSpecies\", function(object, ...) standardGeneric(\"cbSpecies\"))\n#' A method for getting the avaiable species from the cellbase web services\n#' \n#' @aliases cbSpecies\n#' @param object An object of class CellbaseQuery\n#' @details A method for getting the avaiable species from the cellbase web services\n#' @examples \n#' library(cellbaseR)\n#'  cb <- CellbaseQuery()\n#'  res <- cbSpecies(object=cb)\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nsetMethod(\"cbSpecies\", \"CellbaseQuery\",  definition = function(object,...) {\n\n  host <- object@host\n  species <- \"species\"\n  version <- object@version\n  meta <- \"meta/\"\n  categ <- NULL\n  subcateg<- NULL\n  ids <- NULL\n  resource <- NULL\n  result <- fetchCellbase(file=NULL,host=host, version=version,meta = meta, species=species, categ=categ, subcateg=subcateg,ids=ids,resource=resource,filters=NULL,...)\n  data <- lapply(result, function(x)as.data.frame(x))\n  return(data)\n})\n\n#######################################################################\n#' A method to allow for updating the species of the CellbaseQuery config\nsetGeneric(\"species<-\",\n           function(object, value) standardGeneric(\"species<-\"))\n#' A method to allow for updating the species of the CellbaseQuery config\n#' @param object An object of class CellbaseQuery\n#' @param value a character specifying the desired species\nsetMethod(\"species<-\",\"CellbaseQuery\",function(object,value){\n  value =paste0(value,\"/\",sep=\"\")\n  object@species <- value\n  return(object)\n})\n\n#' A method to allow for updating the host of the CellbaseQuery config\n#' @param object An object of class CellbaseQuery\n#' @param value a character specifying the desired host\n\nsetGeneric(\"host<-\",\n           function(object, value) standardGeneric(\"host<-\"))\nsetMethod(\"host<-\",\"CellbaseQuery\",function(object,value){\n  value =paste0(value,\"/\",sep=\"\")\n  object@host <- value\n  return(object)\n})\n#Need more work\nsetGeneric(\"annotateVcf\", function(object,file, ...) standardGeneric(\"annotateVcf\"))\n#' This method is a convience method to annoatate a vcf files\n#'\n#' @details This methods is ideal for annotating small to medium sized vcf files\n#' @param object An object of class CellbaseQuery\n#' @param ... any extra arguments\n#' @param file Path to a bgzipped and tabix indexed vcf file\n#' @return an annotated dataframe\n#' @export\nsetMethod(\"annotateVcf\", \"CellbaseQuery\",  definition = function(object,file,...) {\n  host <- object@host\n  version <- object@version\n  species <- object@species\n  batch_size <- object@batch_size\n  num_threads <- object@num_threads\n  categ <- \"genomic\"\n  subcateg<- \"variant\"\n  ids <- NULL\n  resource <- \"/annotation\"\n  result <- fetchCellbase(host, file=file,version,meta=NULL, species, categ, subcateg,ids=NULL,resource,filters=NULL,batch_size=batch_size,num_threads=num_threads)\n  data <- CellbaseResult(cellbaseData=result)\n  return(data)\n})\n\n#####################################################################################################\n# The CellbaseResult class defintion\n#' @export\nCellbaseResult <- setClass(\"CellbaseResult\",slots = c(cellbaseData=\"data.frame\"))\n#  The show method for CellbaseResult class\nsetMethod(\"show\",signature = \"CellbaseResult\",definition = function(object){\n  cat(\"An object of class \", class(object), \"\\n\", sep = \"\")\n  cat(\" containing \", nrow(object@cellbaseData), \" rows and \",\n      ncol(object@cellbaseData), \" columns.\\n\", sep = \"\")\n  cat(\" to get the annotated dataframe use cellbaseData()\")\n})\n\n# An accessor method to get CellbaseResult cellbaseData slot\nsetGeneric(\"cellbaseData\", function(object, ...) standardGeneric(\"cellbaseData\"))\n#' A method to query Clinical data from Cellbase web services\n#' @param object an object of class CellbaseQuery\n#' @param ids a charcter vector of the ids to be queried\n#' @param resource a charcter vector to specify the ids to be queried\n#' @param filters a object of class CellbaseParam specifying additional filterss for the CellbaseQuery\n#' @return an object of class CellbaseResult which holds a dataframe\n#'\n#' @export\nsetMethod(\"cellbaseData\", \"CellbaseResult\",  definition = function(object) object@cellbaseData)\n#' A method to allow for subsetting the cellbaseData\n\n#' @export\nsetMethod(\"[\",\"CellbaseResult\",definition = function(x,i,j,drop=\"missing\")\n{\n  .cellbaseData <- x@cellbaseData[i, j]\n  CellbaseResult(cellbaseData = .cellbaseData)\n})\n\n#####################################################################################################\n#'This Class defines a CellbaseParam object\n#'\n setClass(\"CellbaseParam\",slots = c(genome=\"character\",gene=\"character\",region=\"character\"\n,rs=\"character\",so=\"character\",phenotype=\"character\"),\nprototype = prototype(genome=character(0),gene=character(0),region=character(0),\n        rs=character(0),so=character(0),phenotype=character(0)))\n#' A constructor function for CellbaseParam\n#'use the CellbaseParam object to control what results are returned from the CellbaseQuery methods\n#' @param genome A character denoting the genome build to query,eg, GRCh37(default),or GRCh38\n#' @param gene A charcter vector denoting the gene/s to be queried\n#' @param region A charcter vector denoting the region/s to be queried must be in the form 1:100000-1500000 not chr1:100000-1500000\n#' @param rs A charcter vector denoting the rs ids to be queried\n#' @param so A charcter vector denoting sequence ontology to be queried\n#' @param phenotype A charcter vector denoting the phenotype to be queried\n#' @examples \n#' library(cellbaseR)\n#' cbParam <- CellbaseParam(genome=\"GRCh38\",gene=c(\"TP73\",\"TET1\"))\n#' print(cbParam)\n#' @seealso for more information about the cellbase webservices see \n#' \\url{https://github.com/opencb/cellbase/wiki}\n#' @export\nCellbaseParam <- function(genome=character(),gene=character(),region=character(),rs=character(),so=character(),phenotype=character()){\n  new(\"CellbaseParam\",genome=genome,gene=gene,region=region,rs=rs,so=so,phenotype=phenotype)\n\n}\n\n\n\n# Show method\nsetMethod(\"show\",signature = \"CellbaseParam\",definition = function(object){\n  cat(\"An object of class \", class(object), \"\\n\", sep = \"\")\n  cat(\"use this object to control what results are returned from the CellbaseQuery methods\")\n})\n",
    "created" : 1461019150555.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1729829912",
    "id" : "B4DB4DC8",
    "lastKnownWriteTime" : 1461421250,
    "last_content_update" : 1461421250,
    "path" : "~/R/cellbase/clients/R/R/cellbase_classes.R",
    "project_path" : "R/cellbase_classes.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}